$date
	Thu Dec 14 02:08:52 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! PENABLE $end
$var wire 32 " PRDATA1 [31:0] $end
$var wire 1 # PREADY $end
$var wire 32 $ PRWADDR [31:0] $end
$var wire 32 % PRWDATA [31:0] $end
$var reg 32 & PADDR [31:0] $end
$var reg 1 ' PCLK $end
$var reg 32 ( PDATA [31:0] $end
$var reg 1 ) PRESET $end
$var reg 1 * PSEL $end
$var reg 1 + PWRITE $end
$var reg 1 , transfer $end
$scope module m $end
$var wire 32 - PADDR [31:0] $end
$var wire 1 . PCLK $end
$var wire 32 / PDATA [31:0] $end
$var wire 1 # PREADY $end
$var wire 1 0 PRESET $end
$var wire 1 1 PSEL $end
$var wire 1 2 PWRITE $end
$var wire 1 3 transfer $end
$var reg 1 4 PENABLE $end
$var reg 32 5 PRWADDR [31:0] $end
$var reg 32 6 PRWDATA [31:0] $end
$var reg 2 7 state [1:0] $end
$scope task apb_read $end
$var reg 32 8 addr [31:0] $end
$upscope $end
$scope task apb_write $end
$var reg 32 9 addr [31:0] $end
$var reg 32 : data [31:0] $end
$upscope $end
$upscope $end
$scope module s $end
$var wire 1 . PCLK $end
$var wire 1 ! PENABLE $end
$var wire 1 0 PRESET $end
$var wire 32 ; PRWADDR [31:0] $end
$var wire 32 < PRWDATA [31:0] $end
$var wire 1 1 PSEL $end
$var wire 1 2 PWRITE $end
$var reg 32 = PRDATA1 [31:0] $end
$var reg 1 > PREADY $end
$var reg 3 ? c [2:0] $end
$var reg 4 @ state [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 @
bx ?
0>
b0 =
b0 <
b0 ;
bx :
bx 9
bx 8
b0 7
b0 6
b0 5
04
13
12
01
10
b1100001001 /
0.
b0 -
1,
1+
0*
1)
b1100001001 (
0'
b0 &
b0 %
b0 $
0#
b0 "
0!
$end
#5
1'
1.
#10
0'
0.
1*
11
0)
00
#15
b1 7
1'
1.
#20
0'
0.
#25
1>
1#
14
1!
1'
1.
#30
0'
0.
#35
b11 7
b1100001001 6
b1100001001 %
b1100001001 <
b1100001001 :
b0 9
1'
1.
#40
0'
0.
#45
b1100001001 =
b1100001001 "
b1 7
1'
1.
#50
0'
0.
0*
01
#55
0>
0#
1'
1.
#60
0'
0.
#65
1'
1.
#70
0'
0.
1*
11
b10100000100100010000000100011 (
b10100000100100010000000100011 /
b1 &
b1 -
#75
1>
1#
1'
1.
#80
0'
0.
#85
b11 7
b1 5
b1 $
b1 ;
b10100000100100010000000100011 6
b10100000100100010000000100011 %
b10100000100100010000000100011 <
b10100000100100010000000100011 :
b1 9
1'
1.
#90
0'
0.
#95
b10100000100100010000000100011 =
b10100000100100010000000100011 "
b1 7
1'
1.
#100
0'
0.
#105
b11 7
1'
1.
#110
0'
0.
0*
01
#115
0>
0#
1'
1.
#120
0'
0.
#125
1'
1.
#130
0'
0.
1*
11
b1010011010011010100111101001100 (
b1010011010011010100111101001100 /
b10 &
b10 -
#135
1>
1#
1'
1.
#140
0'
0.
#145
b1 7
1'
1.
#150
0'
0.
#155
b11 7
b10 5
b10 $
b10 ;
b1010011010011010100111101001100 6
b1010011010011010100111101001100 %
b1010011010011010100111101001100 <
b1010011010011010100111101001100 :
b10 9
1'
1.
#160
0'
0.
#165
b1010011010011010100111101001100 =
b1010011010011010100111101001100 "
b1 7
1'
1.
#170
0'
0.
0*
01
#175
0>
0#
1'
1.
#180
0'
0.
#185
1'
1.
#190
0'
0.
1*
11
b1001001010101100100000101001110 (
b1001001010101100100000101001110 /
b11 &
b11 -
#195
1>
1#
1'
1.
#200
0'
0.
#205
b11 7
b11 5
b11 $
b11 ;
b1001001010101100100000101001110 6
b1001001010101100100000101001110 %
b1001001010101100100000101001110 <
b1001001010101100100000101001110 :
b11 9
1'
1.
#210
0'
0.
#215
b1001001010101100100000101001110 =
b1001001010101100100000101001110 "
b1 7
1'
1.
#220
0'
0.
#225
b11 7
1'
1.
#230
0'
0.
0*
01
#235
0>
0#
1'
1.
#240
0'
0.
#245
1'
1.
#250
0'
0.
